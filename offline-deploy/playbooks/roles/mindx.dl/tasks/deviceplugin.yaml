- name: include vars
  include_vars: ../defaults/main.yml

- name: include vars
  include_tasks: create_user.yaml

# 在远端创建mindxdl镜像目录
- name: create mindxdl images directory on remote
  file:
    path: "{{mindxdl_images_dir}}/{{ansible_architecture}}"
    state: directory
    mode: 0750
  when:
    - not use_harbor

- name: list device_plugin images
  shell: "ls {{mindxdl_images_dir}}/{{ansible_architecture}} | grep {{DEVICE_PLUGIN_IMAGE}}"
  delegate_to: localhost
  delegate_facts: true
  register: device_plugin_images
  when:
    - not use_harbor

# 复制deviceplugin镜像到worker
- name: copy deviceplugin images to remote worker
  copy:
    src: "{{mindxdl_images_dir}}/{{ ansible_architecture }}/{{item}}"
    dest: "{{mindxdl_images_dir}}/{{ ansible_architecture }}/"
    mode: 0640
    owner: "{{ansible_user_id}}"
    group: "{{ansible_user_id}}"
  loop: "{{device_plugin_images.stdout_lines}}"
  when:
    - not use_harbor

# 在worker节点加载noded镜像
- name: load deviceplugin images
  shell: "docker load -i {{mindxdl_images_dir}}/{{ansible_architecture}}/{{item}}"
  loop: "{{device_plugin_images.stdout_lines}}"
  when:
    - not use_harbor

- name: label worker
  shell: |
    kubectl label --overwrite node {{ NODE_NAME }} node-role.kubernetes.io/worker=worker
    kubectl label --overwrite node {{ NODE_NAME }} workerselector=dls-worker-node
  environment:
    http_proxy: ""
    https_proxy: ""
    HTTP_PROXY: ""
    HTTPS_PROXY: ""
  delegate_to: "{{ groups['master'][0] }}"
  delegate_facts: true

- name: check product name
  shell: dmidecode -t 1 | grep "Product Name"
  register: product_name
  ignore_errors: yes

- name: check device
  shell: lspci | grep "Processing accelerators"
  register: processing_accelerator
  ignore_errors: yes

- name: message
  debug:
    msg: "can not find npu card, please check"
  when: processing_accelerator.rc != 0

- name: label ascend310
  shell: kubectl label --overwrite node {{ NODE_NAME }} accelerator=huawei-Ascend310
  delegate_to: "{{ groups['master'][0] }}"
  delegate_facts: true
  environment:
    http_proxy: ""
    https_proxy: ""
    HTTP_PROXY: ""
    HTTPS_PROXY: ""
  when: "'Device d100' in processing_accelerator.stdout"

- name: label ascend310P
  shell: kubectl label --overwrite node {{ NODE_NAME }} accelerator=huawei-Ascend310P
  delegate_to: "{{ groups['master'][0] }}"
  delegate_facts: true
  environment:
    http_proxy: ""
    https_proxy: ""
    HTTP_PROXY: ""
    HTTPS_PROXY: ""
  when: "'Device d500' in processing_accelerator.stdout"

- name: label ascend910
  shell: kubectl label --overwrite node {{ NODE_NAME }} accelerator=huawei-Ascend910
  delegate_to: "{{ groups['master'][0] }}"
  delegate_facts: true
  environment:
    http_proxy: ""
    https_proxy: ""
    HTTP_PROXY: ""
    HTTPS_PROXY: ""
  when: "'Device d801' in processing_accelerator.stdout"

- name: label 300T
  shell: kubectl label --overwrite node {{ NODE_NAME }} accelerator-type=card
  delegate_to: "{{ groups['master'][0] }}"
  delegate_facts: true
  environment:
    http_proxy: ""
    https_proxy: ""
    HTTP_PROXY: ""
    HTTPS_PROXY: ""
  when:
    - "'Device d801' in processing_accelerator.stdout"
    - "'Atlas' not in product_name.stdout"

- name: create log directories
  file:
    path: /var/log/mindx-dl
    state: directory
    owner: root
    group: root
    mode: 0755

- name: create log directories for root
  file:
    path: "/var/log/mindx-dl/devicePlugin"
    state: directory
    owner: "root"
    group: "root"
    mode: 0750

- name: create mindx-dl image pull secret
  delegate_to: "{{ groups['master'][0] }}"
  run_once: true
  shell: |
    kubectl create secret generic {{ KUBE_SYSTEM_SECRET_NAME }} --from-file=.dockerconfigjson=/root/.docker/config.json --type=kubernetes.io/dockerconfigjson -n kube-system >/dev/null 2>&1 || echo 0;
  environment:
    http_proxy: ""
    https_proxy: ""
    HTTP_PROXY: ""
    HTTPS_PROXY: ""
  ignore_errors: true
  when:
    - use_harbor

- name: list device-plugin yaml
  delegate_to: "{{ groups['master'][0] }}"
  shell: "ls {{mindxdl_yaml_dir}} | grep {{DEVICE_PLUGIN_COMPONENT}} | grep -v 'without'"
  register: yaml_file

- name: modify device-plugin yaml
  delegate_to: "{{ groups['master'][0] }}"
  run_once: true
  shell: |
    sed -i 's/image: /image: {{ HARBOR_SERVER }}\/{{ HARBOR_MINDX_PROJECT }}\//' {{ mindxdl_yaml_dir }}/{{ item }};
    sed -i 's/imagePullPolicy: Never/imagePullPolicy: IfNotPresent/' {{ mindxdl_yaml_dir }}/{{ item }};
    sed -i '/      containers:/i\      imagePullSecrets:' {{ mindxdl_yaml_dir }}/{{ item }};
    sed -i '/      containers:/i\        - name: {{KUBE_SYSTEM_SECRET_NAME}}' {{ mindxdl_yaml_dir }}/{{ item }};
  loop: "{{ yaml_file.stdout_lines }}"
  when:
    - use_harbor

# 执行device plugin的yaml
- name: apply device plugin 310P yaml
  delegate_to: "{{ groups['master'][0] }}"
  run_once: true
  shell:
    cmd:
      ((kubectl get nodes --show-labels | grep "huawei-Ascend310P" 1>/dev/null) && (ls {{mindxdl_yaml_dir}}/*310P-volcano*yaml | head -n 1 | xargs -n 1 kubectl apply -f)) || true
  environment:
    http_proxy: ""
    https_proxy: ""
    HTTP_PROXY: ""
    HTTPS_PROXY: ""
  when:
    - yaml_file.stdout_lines | length > 0

- name: apply device plugin 310 yaml
  delegate_to: "{{ groups['master'][0] }}"
  run_once: true
  shell:
    cmd:
      ((kubectl get nodes --show-labels | grep -w "huawei-Ascend310" 1>/dev/null) && (ls {{mindxdl_yaml_dir}}/*310-volcano*yaml | head -n 1 | xargs -n 1 kubectl apply -f)) || true
  environment:
    http_proxy: ""
    https_proxy: ""
    HTTP_PROXY: ""
    HTTPS_PROXY: ""
  when:
    - yaml_file.stdout_lines | length > 0

- name: apply device plugin 910 yaml
  delegate_to: "{{ groups['master'][0] }}"
  run_once: true
  shell:
    cmd:
      ((kubectl get nodes --show-labels | grep "huawei-Ascend910" 1>/dev/null) && (ls {{mindxdl_yaml_dir}}/device-plugin-volcano*yaml | head -n 1 | xargs -n 1 kubectl apply -f)) || true
  environment:
    http_proxy: ""
    https_proxy: ""
    HTTP_PROXY: ""
    HTTPS_PROXY: ""
  when:
    - yaml_file.stdout_lines | length > 0