# 在远端创建mindxdl目录
- name: create mindxdl directory
  file:
    path: "{{mindxdl_dir}}"
    state: directory
    mode: 0750
  when:
    - ansible_connection != "local"

# 在本地打包mindxdl目录
- name: "archive mindxdl package on localhost(tips: this step maybe take a while)"
  local_action:
    module: archive
    path: "{{resource_dir}}/mindxdl"
    dest: "{{resource_dir}}/mindxdl.tar.gz"
    mode: 0640
  when:
    - no_copy_flag != "true"
    - not (host_count == "1" and first_host == "localhost")
  run_once: true

# 复制mindxdl包到远端并解压软件安装包
- name: unarchive mindxdl package on remote
  ansible.builtin.unarchive:
    src: "{{resource_dir}}/mindxdl.tar.gz"
    dest: "{{resource_dir}}"
    mode: 0750
    copy: yes
  when:
    - ansible_connection != "local"
    - no_copy_flag != "true"

- name: unarchive mindxdl images on localhost
  ansible.builtin.unarchive:
    src: "{{ mindxdl_base_img }}.tar.gz"
    dest: "{{resource_dir}}/images/"
    mode: 0750
  when:
    - ansible_connection == "local"
    - no_copy_flag != "true"

- name: create mindxdl images directory on remote
  file:
    path: "{{resource_dir}}/images/"
    state: directory
    mode: 0750
  when:
    - ansible_connection != "local"

# 复制基础镜像到远端并解压
- name: unarchive mindxdl images on remote
  ansible.builtin.unarchive:
    src: "{{ mindxdl_base_img }}.tar.gz"
    dest: "{{resource_dir}}/images/"
    mode: 0750
    copy: yes
  when:
    - ansible_connection != "local"
    - no_copy_flag != "true"

- name: list base images
  command: "ls {{ mindxdl_base_img }}"
  register: base_images

- name: load base images
  shell: "docker load -i {{ mindxdl_base_img }}/{{item}}"
  loop: "{{ base_images.stdout_lines }}"

# 复制组件制作镜像的Dockerfile
- name: copy build_file dir to remote
  copy:
    src: "{{resource_dir}}/build_file"
    dest: "{{resource_dir}}"
    mode: 0750
  when:
    - ansible_connection != "local"
    - no_copy_flag != "true"

# 列出mindxdl目录下的所有文件/目录
- name: list files and dir in mindxdl
  command: "ls {{mindxdl_dir}}"
  register: dir_out

# 在mindxdl目录下创建对应本机架构的组件的解压目录，如: mindxdl/x86_64/Ascend-mindxdl-noded_3.0.RC1_linux-x86_64
- name: create mindxdl component package dir
  file:
    path: "{{mindxdl_dir}}/{{ansible_architecture}}/{{item | replace('.zip', '')}}"
    state: directory
    owner: "{{ansible_user_id}}"
    group: "{{ansible_user_id}}"
    mode: 0750
  loop: "{{dir_out.stdout_lines}}"
  when:
    - "ansible_architecture in item"
    - no_copy_flag != "true"
    - item.endswith("zip")

# 在制作镜像各节点解压文件 远端操作
- name: unarchive mindxdl component package
  ansible.builtin.unarchive:
    src: "{{mindxdl_dir}}/{{item}}"
    dest: "{{mindxdl_dir}}/{{ansible_architecture}}/{{item | replace('.zip', '')}}/"
    copy: no
  loop: "{{dir_out.stdout_lines}}"
  when:
    - "ansible_architecture in item"
    - no_copy_flag != "true"
    - item.endswith("zip")

# 在制作镜像各节点复制npu-exporter的Dockerfile和yaml到组件解压目录
- name: copy npu-exporter Dockerfile and yaml
  shell:
    cmd:
      np_version="$(echo {{item}} | awk -F"_" '{print $2}')";
      cp {{resource_dir}}/build_file/npu-exporter/Dockerfile {{mindxdl_dir}}/{{ansible_architecture}}/{{item | replace(".zip", "")}}/;
      cp {{resource_dir}}/build_file/npu-exporter/npu-exporter.yaml {{mindxdl_dir}}/{{ansible_architecture}}/{{item | replace(".zip", "")}}/;
      sed -i "s/ npu-exporter:.*/ npu-exporter:v$np_version/" {{mindxdl_dir}}/{{ansible_architecture}}/{{item | replace(".zip", "")}}/npu-exporter.yaml;
      sed -i "s/updateTime=5\s*$/updateTime=5 -enableHTTP=true /" {{mindxdl_dir}}/{{ansible_architecture}}/{{item | replace(".zip", "")}}/npu-exporter.yaml;
      sed -i "s/updateTime=5\s*$/updateTime=5 -enableHTTP=true /" {{mindxdl_dir}}/{{ansible_architecture}}/{{item | replace(".zip", "")}}/npu-exporter-v${np_version}.yaml | true
  loop: "{{dir_out.stdout_lines}}"
  when:
    - no_copy_flag != "true"
    - item.endswith("zip")
    - NPU_EXPORTER in item
